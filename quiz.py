{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "OperationalError",
     "evalue": "no such table: students",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mOperationalError\u001b[0m                          Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-21-91681eee93d1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m    197\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    198\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'__main__'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 199\u001b[1;33m     \u001b[0mstuload\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    200\u001b[0m     \u001b[0mqzload\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    201\u001b[0m     \u001b[0mapp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-21-91681eee93d1>\u001b[0m in \u001b[0;36mstuload\u001b[1;34m()\u001b[0m\n\u001b[0;32m     36\u001b[0m     \u001b[1;32mwith\u001b[0m \u001b[0mlite\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'hw13.db'\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mcon\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     37\u001b[0m         \u001b[0mcur\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcon\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcursor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 38\u001b[1;33m         \u001b[0mcur\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"SELECT * FROM students\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     39\u001b[0m         \u001b[0mrows\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcur\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfetchall\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     40\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mrows\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mOperationalError\u001b[0m: no such table: students"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# -*- coding: utf-8 -*-\n",
    "\n",
    "import re\n",
    "import logging\n",
    "from logging import FileHandler\n",
    "import traceback\n",
    "import sqlite3 as lite\n",
    "from flask import Flask, render_template, request, redirect\n",
    "from datetime import datetime\n",
    "\n",
    "app = Flask(__name__)\n",
    "file_handler = FileHandler(\"./logfile.log\")\n",
    "file_handler.setLevel(logging.INFO)\n",
    "app.logger.addHandler(file_handler)\n",
    "con = None\n",
    "stulist = {}\n",
    "qzlist = {}\n",
    "qzscrlist = {}\n",
    "uname = ''\n",
    "pp = ''\n",
    "loggy = False\n",
    "loginerror = 'Invalid credentials. Please try again'\n",
    "\n",
    "def credvalid(uname, pp):\n",
    "    global loggy \n",
    "    if uname == 'admin' and pp == 'password':\n",
    "        loggy = True\n",
    "        return loggy\n",
    "    else:\n",
    "        loggy = False\n",
    "        return loggy\n",
    "    \n",
    "def stuload():\n",
    "    with lite.connect('hw13.db') as con:\n",
    "        cur = con.cursor()\n",
    "        cur.execute(\"SELECT * FROM students\")\n",
    "        rows = cur.fetchall()\n",
    "        if rows:\n",
    "            for row in rows:\n",
    "                stulist[row[0]] = [row[1], row[2]]\n",
    "    return\n",
    "\n",
    "def qzload():\n",
    "    with lite.connect('hw13.db') as con:\n",
    "        cur = con.cursor()\n",
    "        cur.execute(\"SELECT * FROM quizzes\")\n",
    "        rows = cur.fetchall()\n",
    "        if rows:\n",
    "            for row in rows:\n",
    "                qzlist[row[0]] = [row[1], row[2], row[3]]\n",
    "\n",
    "    return\n",
    "\n",
    "def qzscrload(stuid):\n",
    "    print (type(stuid))\n",
    "    qzscrlist.clear()\n",
    "    rwct = 0\n",
    "    with lite.connect('hw13.db') as con:\n",
    "        cur = con.cursor()\n",
    "        cur.execute(\"SELECT s.id, s.first_name, s.last_name, q.subject, \"\n",
    "                     \"q.q_date, qs.score FROM students s left join \"\n",
    "                     \"quizScore qs on qs.stu_id = s.id left join quizzes q \"\n",
    "                     \"on q.id = qs.q_id where s.id = ?\", (stuid))\n",
    "        rows = cur.fetchall()\n",
    "        if rows:\n",
    "            for row in rows:\n",
    "                qzscrlist[rwct] = [row[0], row[1], row[2], row[3],\n",
    "                row[4], row[5]]\n",
    "                rwct += 1\n",
    "    return \n",
    "\n",
    "@app.route('/')\n",
    "def login():\n",
    "    return render_template('login.html')\n",
    "\n",
    "@app.route('/login', methods = ['POST'])\n",
    "def logincheck():\n",
    "    global uname\n",
    "    uname = request.form['Username']\n",
    "    global pp\n",
    "    pp = request.form['Password']\n",
    "    credvalid(uname, pp)\n",
    "    if loggy:\n",
    "        return render_template('dashboard.html', stulist = stulist, qzlist = qzlist)\n",
    "    else:\n",
    "        app.logger.error(loginerror, uname, pp)\n",
    "        return render_template('login.html', error = loginerror)\n",
    "    \n",
    "@app.route('/addstu')\n",
    "def stuurlink():\n",
    "    if loggy:\n",
    "        return render_template('./student/add.html', stulist = stulist)\n",
    "    else:\n",
    "        app.logger.error(loginerror, uname, pp)\n",
    "        return render_template('login.html', error = loginerror)\n",
    "\n",
    "@app.route('/addstu', methods = ['POST'])\n",
    "def addstu():\n",
    "    if loggy:    \n",
    "        fname = request.form['FirstName']\n",
    "        lname = request.form['LastName']\n",
    "        try:\n",
    "            if fname == '' or lname == '':\n",
    "                InErr = 'Incorrect Value Enterd, Try Again'\n",
    "                app.logger.error(InErr)\n",
    "                raise Exception(InErr)\n",
    "            else:\n",
    "                with lite.connect('hw13.db') as con1:\n",
    "                    cur1 = con1.cursor()\n",
    "                    cur1.execute(\"INSERT INTO students(first_name, last_name) VALUES(?, ?);\"\n",
    "                                 , (fname, lname))\n",
    "                stuload()\n",
    "                return render_template('./student/add.html', stulist = stulist)\n",
    "        except(Exception) as e:\n",
    "            stuload()\n",
    "            error = 'SQL Insert Error, Please Try Again.'\n",
    "            return render_template('./student/add.html', stulist = stulist, error = e)\n",
    "    else:\n",
    "        app.logger.error(loginerror, uname, pp)\n",
    "        return render_template('login.html', error = loginerror)\n",
    "\n",
    "@app.route('/addqz')\n",
    "def qzurlink():\n",
    "    if loggy:\n",
    "        return render_template('./quiz/addqz.html', qzlist = qzlist)\n",
    "    else:\n",
    "        app.logger.error(loginerror, uname, pp)\n",
    "        return render_template('login.html', error = loginerror)\n",
    "\n",
    "@app.route('/addqz', methods = ['POST'])\n",
    "def addqz():\n",
    "    if loggy:\n",
    "        try:\n",
    "            QzSub = request.form['QzSubj']\n",
    "            QCnt = int(request.form['QCnt'])\n",
    "            QzDte = request.form['QzDte']\n",
    "            with lite.connect('hw13.db') as con1:\n",
    "                cur1 = con1.cursor()\n",
    "                cur1.execute(\"INSERT INTO quizzes(subject, q_cnt, q_date) VALUES(?, ?, ?);\"\n",
    "                             , (QzSub, QCnt, QzDte))\n",
    "            qzload()\n",
    "            return render_template('./quiz/addqz.html', qzlist = qzlist)\n",
    "        except Exception as e:\n",
    "            qzload()\n",
    "            app.logger.error(traceback.format_exc())\n",
    "            err = 'Invalid Entry, Please Try Again'\n",
    "            return render_template('./quiz/addqz.html', qzlist = qzlist,\n",
    "                                   error = err)\n",
    "    else:\n",
    "        app.logger.error(loginerror, uname, pp)\n",
    "        return render_template('login.html', error = loginerror)\n",
    "    \n",
    "@app.route('/viewstu', methods = ['GET'])\n",
    "def stuqzurlink():\n",
    "    if loggy:\n",
    "        stuid = request.args.get('stuid')\n",
    "        qzscrload(stuid)\n",
    "        return render_template('./student/viewstu.html', stuvwlist = qzscrlist)\n",
    "    else:\n",
    "        app.logger.error(loginerror, uname, pp)\n",
    "        return render_template('login.html', error = loginerror)\n",
    "\n",
    "@app.route('/addstuqz')\n",
    "def stuqzuraddlink():\n",
    "    if loggy:\n",
    "        stuidlist = stulist.keys()\n",
    "        qzidlist = qzlist.keys()\n",
    "        return render_template('./results/addstuqz.html', stulist = stulist\n",
    "                               , qzlist = qzidlist)\n",
    "    else:\n",
    "        app.logger.error(loginerror, uname, pp)\n",
    "        return render_template('login.html', error = loginerror)\n",
    "\n",
    "@app.route('/addstuqz', methods = ['Post'])\n",
    "def SaveStuQz():\n",
    "    if loggy:\n",
    "        try:\n",
    "            stuid = request.form['StuID']\n",
    "            qzuid = request.form['QzID']\n",
    "            qzscr = request.form['QzScr']\n",
    "            with lite.connect('hw13.db') as con1:\n",
    "                cur1 = con1.cursor()\n",
    "                cur1.execute(\"INSERT INTO quizScore (stu_id, q_id, score) \"\n",
    "                             \"VALUES(?, ?, ?);\", (stuid, qzuid, qzscr))\n",
    "            return render_template('./results/addstuqz.html',stulist = stulist\n",
    "                                   ,qzlist = qzlist)#redirect('/login')\n",
    "        except Exception as e:\n",
    "            app.logger.error(traceback.format_exc())\n",
    "            err = 'Invalid Entry, Please Try Again'\n",
    "            return render_template('./results/addstuqz.html',stulist = stulist\n",
    "                                   ,qzlist = qzlist, error = err)\n",
    "    else:\n",
    "        app.logger.error(loginerror, uname, pp)\n",
    "        return render_template('login.html', error = loginerror)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    stuload()\n",
    "    qzload()\n",
    "    app.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
